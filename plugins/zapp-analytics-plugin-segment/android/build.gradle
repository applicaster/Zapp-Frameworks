import org.gradle.util.VersionNumber

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def getExtOrDefault(name, fallback) {
    def ver = rootProject.ext.has(name) ? rootProject.ext.get(name) : fallback
    if (VersionNumber.parse(fallback) > VersionNumber.parse(ver)) {
        throw new Exception("Version mismatch for $name: $ver found, at least $fallback required")
    }
    return ver
}

def getExtOrIntegerDefault(name, fallback) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name).toInteger() : fallback
}

android {
    compileSdkVersion getExtOrIntegerDefault("compileSdkVersion", 29)
    buildToolsVersion getExtOrDefault("buildToolsVersion", '29.0.3')

    defaultConfig {
        minSdkVersion getExtOrIntegerDefault("minSdkVersion", 19)
        targetSdkVersion getExtOrIntegerDefault("targetSdkVersion", 29)

        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url 'https://maven.google.com' }
    maven { url 'https://jitpack.io' }
}

//SDK Manager
buildscript {
    ext.kotlin_version = '1.3.50'
    repositories {
        google()
        maven { url 'https://jitpack.io' }
        mavenCentral()
        maven { url 'https://google.bintray.com/exoplayer/' }
    }
    dependencies {
        //classpath 'com.github.JakeWharton:sdk-manager-plugin:1d29782dd6ffa18880c8cbada748fb3dea45e7be'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

dependencies {
    // Check if an open SDK is defined - if not use the closed one.
    if (!findProject(':applicaster-android-sdk')) {
        def sdkVersion = getExtOrDefault('applicaster_android_sdk_core_version', '8.0.0')
        api "com.applicaster:applicaster-android-sdk-core:${sdkVersion}"
    }
    else {
        api project(':applicaster-android-sdk')
    }

    api 'com.npaw.youbora:youboralib:6.0.9'
    api 'com.segment.analytics.android:analytics:4.10.0'
}
