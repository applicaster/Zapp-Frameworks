apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

import org.gradle.util.VersionNumber

def _buildToolsVersion = safeExtGet("buildToolsVersion", "29.0.3")
def _compileSdkVersion = safeExtGetInt("compileSdkVersion", 29)
def _minSdkVersion = safeExtGetInt("minSdkVersion", 19)
def _targetSdkVersion = safeExtGetInt("targetSdkVersion", 29)
def applicasterSDKVersion = safeExtGet("applicaster_android_sdk_core_version", "8.0.0")

android {
    compileSdkVersion _compileSdkVersion
    buildToolsVersion _buildToolsVersion

    defaultConfig {
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

def safeExtGet(prop, fallback) {
    def ver = rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    if (VersionNumber.parse(fallback) > VersionNumber.parse(ver)) {
        throw new Exception("Version mismatch for $prop: $ver found, at least $fallback required")
    }
    return ver
}

def safeExtGetInt(prop, fallback) {
    def ver = rootProject.ext.has(prop) ? rootProject.ext.get(prop) as int : fallback
    if (fallback > ver) {
        throw new Exception("Version mismatch for $prop: $ver found, at least $fallback required")
    }
    return ver
}

def kotlin_version = safeExtGet('kotlin_version', '1.3.50')

dependencies {
    // Applicaster SDK
    // Check if an open SDK is defined - if not use the closed one.
    def devSDK = findProject(':applicaster-android-sdk')
    if (devSDK != null) {
        implementation project(':applicaster-android-sdk')
    } else {
        api "com.applicaster:applicaster-android-sdk-core:$applicasterSDKVersion"
    }

    implementation 'androidx.appcompat:appcompat:1.3.0'

    // Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_version"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
